#include "stdafx.h"

#include <dinput.h>
#include "key_binding_registrator.h"
#include "xr_level_controller.h"

using namespace luabind;

s32 dik_to_bind(s32 dik)
{
	return get_binded_action(dik);
}

#pragma optimize("s",on)
void key_binding_registrator::script_register(lua_State* L)
{
	module(L)
		[
			def("dik_to_bind", &dik_to_bind),

			class_<enum_exporter<EGameActions> >("key_bindings")
			.enum_("commands")
		[
			value("kFWD", s32(kFWD)),
			value("kBACK", s32(kBACK)),
			value("kL_STRAFE", s32(kL_STRAFE)),
			value("kR_STRAFE", s32(kR_STRAFE)),
			value("kL_LOOKOUT", s32(kL_LOOKOUT)),
			value("kR_LOOKOUT", s32(kR_LOOKOUT)),
			value("kLEFT", s32(kLEFT)),
			value("kRIGHT", s32(kRIGHT)),
			value("kUP", s32(kUP)),
			value("kDOWN", s32(kDOWN)),
			value("kJUMP", s32(kJUMP)),
			value("kCROUCH", s32(kCROUCH)),
			value("kCROUCH_TOGGLE", s32(kCROUCH_TOGGLE)),
			value("kACCEL", s32(kACCEL)),
			value("kCAM_1", s32(kCAM_1)),
			value("kCAM_2", s32(kCAM_2)),
			value("kCAM_3", s32(kCAM_3)),
			value("kCAM_4", s32(kCAM_4)),
			value("kCAM_ZOOM_IN", s32(kCAM_ZOOM_IN)),
			value("kCAM_ZOOM_OUT", s32(kCAM_ZOOM_OUT)),
			value("kTORCH", s32(kTORCH)),
			value("kNIGHT_VISION", s32(kNIGHT_VISION)),
			value("kWPN_1", s32(kWPN_1)),
			value("kWPN_2", s32(kWPN_2)),
			value("kWPN_3", s32(kWPN_3)),
			value("kWPN_4", s32(kWPN_4)),
			value("kWPN_5", s32(kWPN_5)),
			value("kWPN_6", s32(kWPN_6)),
			value("kWPN_NEXT", s32(kWPN_NEXT)),
			//.				value("kWPN_PREV",					s32(kWPN_PREV)),
		value("kWPN_FIRE", s32(kWPN_FIRE)),
		value("kWPN_RELOAD", s32(kWPN_RELOAD)),
		value("kWPN_ZOOM", s32(kWPN_ZOOM)),
		value("kWPN_FUNC", s32(kWPN_FUNC)),
		value("kUSE", s32(kUSE)),
		value("kDROP", s32(kDROP)),
		value("kSCORES", s32(kSCORES)),
		value("kCHAT", s32(kCHAT)),
		value("kSCREENSHOT", s32(kSCREENSHOT)),
		value("kQUIT", s32(kQUIT)),
		value("kCONSOLE", s32(kCONSOLE)),
		value("kINVENTORY", s32(kINVENTORY)),
		value("kBUY", s32(kBUY)),
		value("kSKIN", s32(kSKIN)),
		value("kTEAM", s32(kTEAM))
		],
		class_<key_binding_registrator >("DIK_keys")
		.enum_("dik_keys")
		[
			value("DIK_ESCAPE", s32(DIK_ESCAPE)),
			value("DIK_2", s32(DIK_2)),
			value("DIK_4", s32(DIK_4)),
			value("DIK_6", s32(DIK_6)),
			value("DIK_8", s32(DIK_8)),
			value("DIK_0", s32(DIK_0)),
			value("DIK_EQUALS", s32(DIK_EQUALS)),
			value("DIK_TAB", s32(DIK_TAB)),
			value("DIK_W", s32(DIK_W)),
			value("DIK_R", s32(DIK_R)),
			value("DIK_Y", s32(DIK_Y)),
			value("DIK_I", s32(DIK_I)),
			value("DIK_P", s32(DIK_P)),
			value("DIK_RBRACKET", s32(DIK_RBRACKET)),
			value("DIK_LCONTROL", s32(DIK_LCONTROL)),
			value("DIK_S", s32(DIK_S)),
			value("DIK_F", s32(DIK_F)),
			value("DIK_H", s32(DIK_H)),
			value("DIK_K", s32(DIK_K)),
			value("DIK_SEMICOLON", s32(DIK_SEMICOLON)),
			value("DIK_GRAVE", s32(DIK_GRAVE)),
			value("DIK_BACKSLASH", s32(DIK_BACKSLASH)),
			value("DIK_X", s32(DIK_X)),
			value("DIK_V", s32(DIK_V)),
			value("DIK_N", s32(DIK_N)),
			value("DIK_COMMA", s32(DIK_COMMA)),
			value("DIK_SLASH", s32(DIK_SLASH)),
			value("DIK_MULTIPLY", s32(DIK_MULTIPLY)),
			value("DIK_SPACE", s32(DIK_SPACE)),
			value("DIK_F1", s32(DIK_F1)),
			value("DIK_F3", s32(DIK_F3)),
			value("DIK_F5", s32(DIK_F5)),
			value("DIK_F7", s32(DIK_F7)),
			value("DIK_F9", s32(DIK_F9)),
			value("DIK_NUMLOCK", s32(DIK_NUMLOCK)),
			value("DIK_NUMPAD7", s32(DIK_NUMPAD7)),
			value("DIK_NUMPAD9", s32(DIK_NUMPAD9)),
			value("DIK_NUMPAD4", s32(DIK_NUMPAD4)),
			value("DIK_NUMPAD6", s32(DIK_NUMPAD6)),
			value("DIK_NUMPAD1", s32(DIK_NUMPAD1)),
			value("DIK_NUMPAD3", s32(DIK_NUMPAD3)),
			value("DIK_DECIMAL", s32(DIK_DECIMAL)),
			value("DIK_F12", s32(DIK_F12)),
			value("DIK_F14", s32(DIK_F14)),
			value("DIK_KANA", s32(DIK_KANA)),
			value("DIK_NOCONVERT", s32(DIK_NOCONVERT)),
			value("DIK_NUMPADEQUALS", s32(DIK_NUMPADEQUALS)),
			value("DIK_AT", s32(DIK_AT)),
			value("DIK_UNDERLINE", s32(DIK_UNDERLINE)),
			value("DIK_STOP", s32(DIK_STOP)),
			value("DIK_UNLABELED", s32(DIK_UNLABELED)),
			value("DIK_RCONTROL", s32(DIK_RCONTROL)),
			value("DIK_DIVIDE", s32(DIK_DIVIDE)),
			value("DIK_RMENU", s32(DIK_RMENU)),
			value("DIK_UP", s32(DIK_UP)),
			value("DIK_LEFT", s32(DIK_LEFT)),
			value("DIK_END", s32(DIK_END)),
			value("DIK_NEXT", s32(DIK_NEXT)),
			value("DIK_DELETE", s32(DIK_DELETE)),
			value("DIK_RWIN", s32(DIK_RWIN)),
			value("DIK_PAUSE", s32(DIK_PAUSE)),
			value("MOUSE_2", s32(MOUSE_2)),
			value("DIK_1", s32(DIK_1)),
			value("DIK_3", s32(DIK_3)),
			value("DIK_5", s32(DIK_5)),
			value("DIK_7", s32(DIK_7)),
			value("DIK_9", s32(DIK_9)),
			value("DIK_MINUS", s32(DIK_MINUS)),
			value("DIK_BACK", s32(DIK_BACK)),
			value("DIK_Q", s32(DIK_Q)),
			value("DIK_E", s32(DIK_E)),
			value("DIK_T", s32(DIK_T)),
			value("DIK_U", s32(DIK_U)),
			value("DIK_O", s32(DIK_O)),
			value("DIK_LBRACKET", s32(DIK_LBRACKET)),
			value("DIK_RETURN", s32(DIK_RETURN)),
			value("DIK_A", s32(DIK_A)),
			value("DIK_D", s32(DIK_D)),
			value("DIK_G", s32(DIK_G)),
			value("DIK_J", s32(DIK_J)),
			value("DIK_L", s32(DIK_L)),
			value("DIK_APOSTROPHE", s32(DIK_APOSTROPHE)),
			value("DIK_LSHIFT", s32(DIK_LSHIFT)),
			value("DIK_Z", s32(DIK_Z)),
			value("DIK_C", s32(DIK_C)),
			value("DIK_B", s32(DIK_B)),
			value("DIK_M", s32(DIK_M)),
			value("DIK_PERIOD", s32(DIK_PERIOD)),
			value("DIK_RSHIFT", s32(DIK_RSHIFT)),
			value("DIK_LMENU", s32(DIK_LMENU)),
			value("DIK_CAPITAL", s32(DIK_CAPITAL)),
			value("DIK_F2", s32(DIK_F2)),
			value("DIK_F4", s32(DIK_F4)),
			value("DIK_F6", s32(DIK_F6)),
			value("DIK_F8", s32(DIK_F8)),
			value("DIK_F10", s32(DIK_F10)),
			value("DIK_SCROLL", s32(DIK_SCROLL)),
			value("DIK_NUMPAD8", s32(DIK_NUMPAD8)),
			value("DIK_SUBTRACT", s32(DIK_SUBTRACT)),
			value("DIK_NUMPAD5", s32(DIK_NUMPAD5)),
			value("DIK_ADD", s32(DIK_ADD)),
			value("DIK_NUMPAD2", s32(DIK_NUMPAD2)),
			value("DIK_NUMPAD0", s32(DIK_NUMPAD0)),
			value("DIK_F11", s32(DIK_F11)),
			value("DIK_F13", s32(DIK_F13)),
			value("DIK_F15", s32(DIK_F15)),
			value("DIK_CONVERT", s32(DIK_CONVERT)),
			value("DIK_YEN", s32(DIK_YEN)),
			value("DIK_CIRCUMFLEX", s32(DIK_CIRCUMFLEX)),
			value("DIK_COLON", s32(DIK_COLON)),
			value("DIK_KANJI", s32(DIK_KANJI)),
			value("DIK_AX", s32(DIK_AX)),
			value("DIK_NUMPADENTER", s32(DIK_NUMPADENTER)),
			value("DIK_NUMPADCOMMA", s32(DIK_NUMPADCOMMA)),
			value("DIK_SYSRQ", s32(DIK_SYSRQ)),
			value("DIK_HOME", s32(DIK_HOME)),
			value("DIK_PRIOR", s32(DIK_PRIOR)),
			value("DIK_RIGHT", s32(DIK_RIGHT)),
			value("DIK_DOWN", s32(DIK_DOWN)),
			value("DIK_INSERT", s32(DIK_INSERT)),
			value("DIK_LWIN", s32(DIK_LWIN)),
			value("DIK_APPS", s32(DIK_APPS)),
			value("MOUSE_1", s32(MOUSE_1)),
			value("MOUSE_3", s32(MOUSE_3)),
			value("DIK_RETURN", s32(DIK_RETURN)),
			value("DIK_NUMPADENTER", s32(DIK_NUMPADENTER))
		]
		];
}
